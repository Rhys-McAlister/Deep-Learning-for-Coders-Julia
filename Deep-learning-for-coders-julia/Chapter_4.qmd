# Under the Hood: Training a Digit Classifier

This chapter utilises the topic of computer vision as a vehicle for introducing a number of fundamental tools and concepts for deep learning.

These tools and concepts include:

-   Roles of arrays and tensors and how broadcasting can be used to operate on these structures.
-   Stochastic gradient descent and how it can be used to train a model.
-   Choosing appropriate loss functions for a basic classification task.
-   The role of mini-batches in training a model.
-   The math that a basic neural network is utilising.

## Pixels: The Foundations of Computer Vision

In an effort to understand the internals of computer vision models, we first begin by discussing how computers handle images. The dataset used to illustrate this concept will be [MNIST](https://en.wikipedia.org/wiki/MNIST_database "MNIST dataset").

In the original book, the FastAI vision library will download the MNIST dataset to your computer and place the images into separate folders depending upon the identity of the image and its position in the train or validation sets. For simplicity here we use the `MLDatasets` package instead.

Below we can see a visualisation of two examples of the images found within these datasets. The images are either a handwritten three or a seven. 

```{julia}
# import Pkg; Pkg.activate(".")
using MLDatasets
using Images
using Plots

dataset = MLDatasets.MNIST(:train)
valid = MLDatasets.MNIST(:test)

three_features = (dataset.features[:,:,dataset.targets .== 3]) / 255
seven_features = (dataset.features[:,:,dataset.targets .== 7]) / 255
valid_three_features = (valid.features[:,:,valid.targets .== 3]) / 255
valid_seven_features = (valid.features[:,:,valid.targets .== 7]) / 255

Plots.heatmap(three_features[:,:,1])
```


```{julia}
Plots.heatmap(seven_features[:,:,9])
```

In a computer everything is represented using numbers and images are no exception. Here we see a small section of the image of a three. Each of the numbers within this array is representative of a pixel within the image. 

```{julia}
three_features[4:10,4:10,1]
```

## First try: Pixel Similarity

For a first approach to solving the issue of distinguishing between a photo of a three or a seven, we begin by calculating the average pixel value of every pixel for both a 3 and a 7. This provides us two group averages that we can consider to be the 'ideal' 3 and 7. Then a comparsion between a given image and these two averages will help us classify said image. 

::: {.callout-tip}
## Baseline

A baseline model is a simple model that you are confident will perform reasonably well. Ideally these models should be easy to implement and test such that we have the ability to reference the performance of our new and more complex models against. This is an important place to begin as without a baseline inplace we can't really judge if our new and fancy models are actually performing that well. 
:::

Let's begin by calculating the average of the pixel values for our 3s and 7s. 